[gd_scene load_steps=4 format=2]

[ext_resource path="res://Gui/NodeEditor/InstructionsButtons.tscn" type="PackedScene" id=1]
[ext_resource path="res://res/action_blocks.png" type="Texture" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

onready var nodeEditor = Game.nodeEditor

onready var instructionsButtons = $InstructionsButtons

var currentModule = null

var buttonsCount = 0

var sizeChanged = false

# Called when the node enters the scene tree for the first time.
func _ready():
	nodeEditor.connect(\"buttons_instructions_changed\", self, \"onButtonsInstructionsChange\")
	hide()
	
#func _process(delta):
#	if sizeChanged == true:
#		_backVisualUpdate()
#		sizeChanged = false
	
#func _backVisualUpdate():
#
#	var firstButton = $InstructionsButtons.get_child(0)
#	var lastButton = $InstructionsButtons.get_child($InstructionsButtons.get_child_count()-1)
#
#	var size =  (lastButton.get_global_rect().position - (firstButton.get_global_rect().position + lastButton.rect_size)) * 2.0
#
#	$Back.rect_global_position = firstButton.rect_global_position
#	$Back.rect_size = size
	
#	var pos = rect_global_position
#	var width = (lastButton.get_global_rect().position - (firstButton.get_global_rect().position + lastButton.rect_size)) * 2.0
	
#	var size = $InstructionsButtons.rect_size * rect_scale
#	$Back.rect_size = Vector2(buttonsCount * 51.2 * 0.25 * buttonsCount + 51.2 * 0.5, 51.2 + 51.2 * 0.125 )
#	$Back.rect_min_size = Vector2(1000, 40.0)
#	$Back.rect_min_size = firstButton.rect_size + Vector2($InstructionsButtons.get_constant(\"separation\") * $InstructionsButtons.get_child_count(), 0.0)
#	$Back.rect_size = firstButton.rect_size + Vector2($InstructionsButtons.get_constant(\"separation\") * $InstructionsButtons.get_child_count(), 0.0)
#	$Back.rect_position = pos - Vector2(51.2 * 0.125 + buttonsCount * 51.2 * 0.5, 51.2 + 0.125 * 51.2)

func _process(delta):
	if is_instance_valid(currentModule):
		rect_global_position = Game.level.getPosFromCellIdx(currentModule.getGlobalIdx()) + Vector2(32.0 * 0.5, -32.0) # - Vector2(859.0 * 0.125 * 0.5 - 32.0 * 0.5, -10.0)
	else:
		hide()

func onButtonsInstructionsChange(newButtonsInstructions, module):
	
	var noConditions = []
	for instruction in newButtonsInstructions:
		if not instruction.has('condition') or instruction['condition'] == false:
			noConditions.append(instruction)

	instructionsButtons.setButtons(noConditions)
	
	instructionsButtons.connectButtons(self, \"onButtonClick\")
	currentModule = module
	if module == null or noConditions.size() == 0:
		hide()
	else:
		show()
#		rect_global_position = Vector2(10, 10)
#		rect_global_position = module.global_position - Vector2(859.0 * 0.125 * 0.5 - 32.0 * 0.5, -10.0)
		buttonsCount = noConditions.size()
	
#	if newButtonsInstructions.size() > 0:
#		sizeChanged = true
#		_backVisualUpdate()

func onButtonClick(buttonData):
	if currentModule != null:
		currentModule.callInstruction(buttonData.instructionId)

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass
"

[node name="ModuleUI" type="Control"]
rect_scale = Vector2( 0.5, 0.5 )
mouse_filter = 2
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Back" type="NinePatchRect" parent="."]
modulate = Color( 0.72549, 0.72549, 0.72549, 0.937255 )
margin_left = -107.0
margin_top = -41.0
margin_right = 752.0
margin_bottom = 240.0
rect_scale = Vector2( 0.25, 0.25 )
texture = ExtResource( 3 )
region_rect = Rect2( 512, 0, 256, 256 )
patch_margin_left = 96
patch_margin_top = 96
patch_margin_right = 96
patch_margin_bottom = 96
axis_stretch_horizontal = 2
axis_stretch_vertical = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="InstructionsButtons" parent="." instance=ExtResource( 1 )]
margin_left = -256.0
margin_top = -32.0
margin_right = 256.0
margin_bottom = 0.0
custom_constants/separation = -3
alignment = 1
